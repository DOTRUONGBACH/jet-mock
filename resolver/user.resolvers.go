package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.31

import (
	"context"
	"fmt"
	"mock-project/ent"
	graphql1 "mock-project/graphql"
	"mock-project/pb"
	"time"

	"entgo.io/contrib/entgql"
	"github.com/google/uuid"
	"google.golang.org/grpc"
	"google.golang.org/protobuf/types/known/timestamppb"
)

// Signin is the resolver for the signin field.
func (r *mutationResolver) Signin(ctx context.Context, input ent.SigninInput) (*ent.AuthPayload, error) {
	conn, err := grpc.Dial("localhost:50051", grpc.WithInsecure())
	if err != nil {
		return nil, err
	}
	defer conn.Close()
	client := pb.NewUserServiceClient(conn)

	// Call the Signup method on the UserService
	req := &pb.SigninRequest{
		Email:    input.Email,
		Password: input.Password,
	}
	res, err := client.Signin(ctx, req)
	if err != nil {
		return nil, err
	}
	// Create and return the AuthPayload object
	payload := &ent.AuthPayload{
		User:  &ent.User{Email: input.Email, Password: input.Password},
		Token: res.Token,
	}
	return payload, nil
}

// Signup is the resolver for the signup field.
func (r *mutationResolver) Signup(ctx context.Context, input ent.SignupInput) (*ent.User, error) {
	// Create a gRPC client for the UserService
	conn, err := grpc.Dial("localhost:50051", grpc.WithInsecure())
	if err != nil {
		return nil, err
	}
	defer conn.Close()
	client := pb.NewUserServiceClient(conn)
	//parse string to timestamp
	dob, err := time.Parse("2006-01-02", input.DateOfBirth)
	if err != nil {
		return nil, err
	}
	dobTimestamp := timestamppb.New(dob)

	req := &pb.SignupRequest{
		User: &pb.User{
			Email:       input.Email,
			FullName:    input.FullName,
			PhoneNumber: input.PhoneNumber,
			DateOfBirth: dobTimestamp,
			IdCard:      input.IDCard,
			MemberCard:  int32(input.MemberCard)},
		Password: input.Password,
	}
	_, err2 := client.Signup(ctx, req)
	if err2 != nil {
		return nil, err
	}

	user := &ent.User{
		Email:       input.Email,
		FullName:    input.FullName,
		PhoneNumber: input.PhoneNumber,
		DateOfBirth: input.DateOfBirth,
		IDCard:      input.IDCard,
		MemberCard:  input.MemberCard,
		Password:    input.Password,
	}
	return user, nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context, after *entgql.Cursor[uuid.UUID], first *int, before *entgql.Cursor[uuid.UUID], last *int, orderBy *ent.UserOrder) (*ent.UserConnection, error) {
	return r.client.User.Query().Paginate(ctx, after, first, before, last, ent.WithUserOrder(orderBy))
}

// ID is the resolver for the id field.
func (r *userResolver) ID(ctx context.Context, obj *ent.User) (string, error) {
	return obj.ID.String(), nil
}

// Mutation returns graphql1.MutationResolver implementation.
func (r *Resolver) Mutation() graphql1.MutationResolver { return &mutationResolver{r} }

// Query returns graphql1.QueryResolver implementation.
func (r *Resolver) Query() graphql1.QueryResolver { return &queryResolver{r} }

// User returns graphql1.UserResolver implementation.
func (r *Resolver) User() graphql1.UserResolver { return &userResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type userResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//   - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//     it when you're done.
//   - You have helper methods in this file. Move them out to keep these resolver files clean.
func (r *userResolver) DateOfBirth(ctx context.Context, obj *ent.User) (string, error) {
	panic(fmt.Errorf("not implemented: DateOfBirth - date_of_birth"))
}
func (r *userResolver) MemberCard(ctx context.Context, obj *ent.User) (string, error) {
	panic(fmt.Errorf("not implemented: MemberCard - member_card"))
}
